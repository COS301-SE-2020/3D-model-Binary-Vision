{
  "_from": "coveralls@^3.1.0",
  "_id": "coveralls@3.1.0",
  "_inBundle": false,
  "_integrity": "sha512-sHxOu2ELzW8/NC1UP5XVLbZDzO4S3VxfFye3XYCznopHy02YjNkHcj5bKaVw2O7hVaBdBjEdQGpie4II1mWhuQ==",
  "_location": "/coveralls",
  "_phantomChildren": {},
  "_requested": {
    "escapedName": "coveralls",
    "fetchSpec": "^3.1.0",
    "name": "coveralls",
    "raw": "coveralls@^3.1.0",
    "rawSpec": "^3.1.0",
    "registry": true,
    "saveSpec": null,
    "type": "range"
  },
  "_requiredBy": [
    "#DEV:/",
    "#USER"
  ],
  "_resolved": "https://registry.npmjs.org/coveralls/-/coveralls-3.1.0.tgz",
  "_shasum": "13c754d5e7a2dd8b44fe5269e21ca394fb4d615b",
  "_shrinkwrap": null,
  "_spec": "coveralls@^3.1.0",
  "_where": "/home/marcus/UNI/Year 3/COS 301/Capstone/Feature-Improvments/3D-model-Binary-Vision/Application",
  "author": {
    "name": "Gregg Caines"
  },
  "bin": {
    "coveralls": "bin/coveralls.js"
  },
  "bugs": {
    "url": "https://github.com/nickmerwin/node-coveralls/issues"
  },
  "bundleDependencies": false,
  "contributors": [
    {
      "name": "Gregg Caines",
      "email": "gregg@caines.ca",
      "url": "http://caines.ca"
    },
    {
      "name": "Joshua Ma",
      "email": "github@joshma.com",
      "url": "http://joshma.com"
    },
    {
      "name": "Alan Gutierrez",
      "email": "alan@prettyrobots.com",
      "url": "http://www.prettyrobots.com/"
    },
    {
      "name": "Kir Belevich",
      "url": "https://github.com/svg"
    },
    {
      "name": "elliotcable",
      "email": "github@elliottcable.name",
      "url": "http://elliottcable.name/"
    },
    {
      "name": "Slotos",
      "email": "slotos@gmail.com",
      "url": "http://slotos.net"
    },
    {
      "name": "mattjmorrison",
      "email": "mattjmorrison@mattjmorrison.com",
      "url": "http://mattjmorrison.com"
    },
    {
      "name": "Arpad Borsos",
      "email": "arpad.borsos@googlemail.com",
      "url": "http://swatinem.de/"
    },
    {
      "name": "Adam Moss",
      "url": "https://github.com/adam-moss"
    }
  ],
  "dependencies": {
    "js-yaml": "^3.13.1",
    "lcov-parse": "^1.0.0",
    "log-driver": "^1.2.7",
    "minimist": "^1.2.5",
    "request": "^2.88.2"
  },
  "deprecated": false,
  "description": "takes json-cov output into stdin and POSTs to coveralls.io",
  "devDependencies": {
    "jshint": "^2.11.0",
    "mocha": "^6.2.3",
    "nyc": "^14.1.1",
    "should": "^9.0.2",
    "shx": "^0.3.2",
    "sinon": "^7.5.0"
  },
  "directories": {
    "test": "test"
  },
  "engines": {
    "node": ">=6"
  },
  "files": [
    "index.js",
    "{bin,lib}/*.js"
  ],
  "homepage": "https://github.com/nickmerwin/node-coveralls#readme",
  "keywords": [
    "coverage",
    "coveralls"
  ],
  "license": "BSD-2-Clause",
  "main": "index.js",
  "maintainers": [
    {
      "name": "Nick Merwin",
      "email": "nick@coveralls.io",
      "url": "https://coveralls.io"
    }
  ],
  "name": "coveralls",
  "nyc": {
    "reporter": [
      "lcov",
      "text-summary"
    ]
  },
  "optionalDependencies": {},
  "readme": "# node-coveralls\n\n[![Build Status][ci-image]][ci-url] [![Coverage Status][coveralls-image]][coveralls-url]\n\n[Coveralls.io](https://coveralls.io/) support for Node.js. Get the great coverage reporting of coveralls.io and add a cool coverage button (like the one above) to your README.\n\nSupported CI services: [Travis CI](https://travis-ci.org/), [CodeShip](https://codeship.com/), [CircleCI](https://circleci.com/), [Jenkins](https://jenkins.io/), [Gitlab CI](https://gitlab.com/), [AppVeyor](https://www.appveyor.com/), [Buildkite](https://buildkite.com/), [GitHub Actions CI](https://github.com/features/actions), [CodeFresh](https://codefresh.io)\n\n## Installation:\n\nAdd the latest version of `coveralls` to your package.json:\n\n```shell\nnpm install coveralls --save-dev\n```\n\nIf you're using mocha, add `mocha-lcov-reporter` to your package.json:\n\n```shell\nnpm install mocha-lcov-reporter --save-dev\n```\n\n## Usage:\n\nThis script `bin/coveralls.js` can take standard input from any tool that emits the lcov data format (including [mocha](https://mochajs.org/)'s [LCOV reporter](https://npmjs.org/package/mocha-lcov-reporter)) and send it to coveralls.io to report your code coverage there.\n\nOnce your app is instrumented for coverage, and building, you need to pipe the lcov output to `./node_modules/coveralls/bin/coveralls.js`.\n\nThis library currently supports [Travis CI](https://travis-ci.org/) with no extra effort beyond piping the lcov output to coveralls. However, if you're using a different build system, there are a few environment variables that are necessary:\n\n- `COVERALLS_SERVICE_NAME` (the name of your build system)\n- `COVERALLS_REPO_TOKEN` (the secret repo token from coveralls.io)\n- `COVERALLS_GIT_BRANCH` (the branch name)\n\nThere are optional environment variables for other build systems as well:\n\n- `COVERALLS_SERVICE_NUMBER` (an id that uniquely identifies the build)\n- `COVERALLS_SERVICE_JOB_ID` (an id that uniquely identifies the build's job)\n- `COVERALLS_RUN_AT` (a date string for the time that the job ran. RFC 3339 dates work. This defaults to your build system's date/time if you don't set it.)\n- `COVERALLS_PARALLEL` (more info here: <https://docs.coveralls.io/parallel-build-webhook>)\n\n### GitHub Actions CI\n\nIf you are using GitHub Actions CI, you should look into [coverallsapp/github-action](https://github.com/coverallsapp/github-action).\n\nIf you prefer to use this package you can do it like this:\n\n```yml\nenv:\n  COVERALLS_REPO_TOKEN: \"${{ secrets.COVERALLS_REPO_TOKEN }}\"\n  COVERALLS_GIT_BRANCH: \"${{ github.ref }}\"\n```\n\n### [Jest](https://jestjs.io/)\n\n- Install [jest](https://jestjs.io/docs/en/getting-started)\n- Use the following to run tests and push files to coveralls on success:\n\n  ```sh\n  jest --coverage && coveralls < coverage/lcov.info\n  ```\n\nCheck out an example [here](https://github.com/Ethan-Arrowood/harperdb-connect/blob/master/.travis.yml) which makes use of Travis CI build stages\n\n### [Mocha](https://mochajs.org/) + [Blanket.js](https://github.com/alex-seville/blanket)\n\n- Install [blanket.js](https://github.com/alex-seville/blanket)\n- Configure blanket according to [docs](https://github.com/alex-seville/blanket/blob/master/docs/getting_started_node.md).\n- Run your tests with a command like this:\n\n  ```sh\n  NODE_ENV=test YOURPACKAGE_COVERAGE=1 ./node_modules/.bin/mocha \\\n    --require blanket \\\n    --reporter mocha-lcov-reporter | ./node_modules/coveralls/bin/coveralls.js\n  ```\n\n### [Mocha](https://mochajs.org/) + [JSCoverage](https://github.com/fishbar/jscoverage)\n\nInstrumenting your app for coverage is probably harder than it needs to be (read [here](http://seejohncode.com/2012/03/13/setting-up-mocha-jscoverage//)), but that's also a necessary step.\n\nIn mocha, if you've got your code instrumented for coverage, the command for a Travis CI build would look something like this:\n\n```sh\nYOURPACKAGE_COVERAGE=1 ./node_modules/.bin/mocha test -R mocha-lcov-reporter | ./node_modules/coveralls/bin/coveralls.js\n```\n\nCheck out an example [Makefile](https://github.com/cainus/urlgrey/blob/master/Makefile) from one of my projects for an example, especially the test-coveralls build target. Note: Travis CI runs `npm test`, so whatever target you create in your Makefile must be the target that `npm test` runs (This is set in package.json's `scripts` property).\n\n### [Istanbul](https://github.com/gotwarlost/istanbul)\n\n#### With Mocha:\n\n```sh\nistanbul cover ./node_modules/mocha/bin/_mocha --report lcovonly -- -R spec && cat ./coverage/lcov.info | ./node_modules/coveralls/bin/coveralls.js && rm -rf ./coverage\n```\n\n#### With Jasmine:\n\n```sh\nistanbul cover jasmine-node --captureExceptions spec/ && cat ./coverage/lcov.info | ./node_modules/coveralls/bin/coveralls.js && rm -rf ./coverage\n```\n\n### [Nodeunit](https://github.com/caolan/nodeunit) + [JSCoverage](https://github.com/fishbar/jscoverage)\n\nDepend on nodeunit, jscoverage and coveralls:\n\n```sh\nnpm install nodeunit jscoverage coveralls --save-dev\n```\n\nAdd a coveralls script to \"scripts\" in your `package.json`:\n\n```json\n\"scripts\": {\n  \"test\": \"nodeunit test\",\n  \"coveralls\": \"jscoverage lib && YOURPACKAGE_COVERAGE=1 nodeunit --reporter=lcov test | coveralls\"\n}\n```\n\nEnsure your app requires instrumented code when `process.env.YOURPACKAGE_COVERAGE` variable is defined.\n\nRun your tests with a command like this:\n\n```sh\nnpm run coveralls\n```\n\nFor detailed instructions on requiring instrumented code, running on Travis CI and submitting to coveralls [see this guide](https://github.com/alanshaw/nodeunit-lcov-coveralls-example).\n\n### [Poncho](https://github.com/deepsweet/poncho)\n\nClient-side JS code coverage using [PhantomJS](https://github.com/ariya/phantomjs), [Mocha](https://mochajs.org/) and [Blanket](https://github.com/alex-seville/blanket):\n\n- [Configure](https://mochajs.org/#running-mocha-in-the-browser) Mocha for browser\n- [Mark](https://github.com/deepsweet/poncho#usage) target script(s) with `data-cover` HTML attribute\n- Run your tests with a command like this:\n\n  ```sh\n  ./node_modules/.bin/poncho -R lcov test/test.html | ./node_modules/coveralls/bin/coveralls.js\n  ```\n\n### [Lab](https://github.com/hapijs/lab)\n\n```sh\nlab -r lcov | ./node_modules/.bin/coveralls\n```\n\n### [nyc](https://github.com/istanbuljs/nyc)\n\nWorks with almost any testing framework. Simply execute\n`npm test` with the `nyc` bin followed by running its reporter:\n\n```shell\nnyc npm test && nyc report --reporter=text-lcov | coveralls\n```\n\n### [TAP](https://github.com/isaacs/node-tap)\n\nSimply run your tap tests with the `COVERALLS_REPO_TOKEN` environment\nvariable set and tap will automatically use `nyc` to report\ncoverage to coveralls.\n\n### Command Line Parameters\n\n```shell\nUsage: coveralls.js [-v] filepath\n```\n\n#### Optional arguments:\n\n- `-v`, `--verbose`\n- `filepath` - optionally defines the base filepath of your source files.\n\n## Running locally\n\nIf you're running locally, you must have a `.coveralls.yml` file, as documented in [their documentation](https://docs.coveralls.io/ruby-on-rails#configuration), with your `repo_token` in it; or, you must provide a `COVERALLS_REPO_TOKEN` environment variable on the command-line.\n\nIf you want to send commit data to coveralls, you can set the `COVERALLS_GIT_COMMIT` environment-variable to the commit hash you wish to reference. If you don't want to use a hash, you can set it to `HEAD` to supply coveralls with the latest commit data. This requires git to be installed and executable on the current PATH.\n\n## Contributing\n\nI generally don't accept pull requests that are untested, or break the build, because I'd like to keep the quality high (this is a coverage tool after all!).\n\nI also don't care for \"soft-versioning\" or \"optimistic versioning\" (dependencies that have ^, x, > in them, or anything other than numbers and dots). There have been too many problems with bad semantic versioning in dependencies, and I'd rather have a solid library than a bleeding edge one.\n\n\n[ci-image]: https://github.com/nickmerwin/node-coveralls/workflows/Tests/badge.svg\n[ci-url]: https://github.com/nickmerwin/node-coveralls/actions?workflow=Tests\n\n[coveralls-image]: https://coveralls.io/repos/nickmerwin/node-coveralls/badge.svg?branch=master&service=github\n[coveralls-url]: https://coveralls.io/github/nickmerwin/node-coveralls?branch=master\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git://github.com/nickmerwin/node-coveralls.git"
  },
  "scripts": {
    "lint": "jshint ./lib ./test ./index.js",
    "mocha": "_mocha -b -R spec",
    "test": "npm run lint && npm run mocha",
    "test-cov": "nyc npm run mocha",
    "test-coveralls": "nyc npm run mocha && shx cat ./coverage/lcov.info | node ./bin/coveralls.js --verbose"
  },
  "version": "3.1.0"
}
